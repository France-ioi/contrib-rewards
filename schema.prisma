generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  login              String?
  email              String    @unique
  image              String?
  Session            Session[]
  Account            Account?
  Donation           Donation[]
  DonationSplit      DonationSplit[]
  MergeRequestAuthor MergeRequestAuthor[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Donation {
  id             String              @id @default(cuid())
  donorId        String
  mergeRequestId String
  review         String?             @db.Text
  createdAt      DateTime            @default(now())
  donor          User                @relation(fields: [donorId], references: [id])
  mergeRequest   MergeRequest        @relation(fields: [mergeRequestId], references: [id])
  amount         Decimal             @db.Decimal(18,8)
  splits         DonationSplit[]

  @@index([donorId])
}

model DonationSplit {
  id           String   @id @default(cuid())
  donationId   String
  recipientId  String
  amount       Decimal  @db.Decimal(18,8)
  donation     Donation @relation(fields: [donationId], references: [id])
  recipient    User     @relation(fields: [recipientId], references: [id])

  @@index([donationId])
  @@index([recipientId])
  @@unique([donationId, recipientId])
}

model MergeRequest {
  id              String   @id @default(cuid())
  repositoryId    String   @unique
  title           String
  mergedAt        DateTime
  linesAdded      Int
  linesRemoved    Int
  filesChanged    Int
  sectionsChanged Int
  link            String
  authors         MergeRequestAuthor[]
  donations       Donation[]
}

model MergeRequestAuthor {
  id              String       @id @default(cuid())
  mergeRequestId  String
  authorId        String
  linesAdded      Int
  linesRemoved    Int
  filesChanged    Int
  sectionsChanged Int
  author          User         @relation(fields: [authorId], references: [id])
  mergeRequest    MergeRequest @relation(fields: [mergeRequestId], references: [id])

  @@unique([mergeRequestId, authorId])
}
